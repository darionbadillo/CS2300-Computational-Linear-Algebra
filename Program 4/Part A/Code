# Darion Badillo
# Assignment 4 Part A - More in 3D
# 11/15/2022
import math
import numpy as np

##Reads file into a matrix
def readMatrix(path):

    ##Creates an array using numpy
    a = np.loadtxt(path, dtype=float)

    #Takes the first row to find eye and removes from array
    e = a[0]
    a = np.delete(a, (0), axis=0)
    print('Read in file successfully')

    return a,e

#Iterates through matrix for culling and intensity calculations
def culling(Mat,e):
    culling = []
    intensity = []
    intensityCulled = []

    #Eye location point
    e1 = e[0]
    e2 = e[1]
    e3 = e[2]

    #Light direction
    d = [e[3],e[4],e[5]]
    
    for row in range(len(Mat)):
        for column in range(0,len(Mat[row])):

            #Chain of ifs to get points P,Q, and R
            if column == 0:
                p1 = Mat[row][column]

            if column == 1:
                p2 = Mat[row][column]

            if column == 2:
                p3 = Mat[row][column]
                
            if column == 3:
                q1 = Mat[row][column]
                
            if column == 4:
                q2 = Mat[row][column]
                
            if column == 5:
                q3 = Mat[row][column]
                
            if column == 6:
                r1 = Mat[row][column]
                
            if column == 7:
                r2 = Mat[row][column]
                
            if column == 8:
                r3 = Mat[row][column]
                
                #Calculate centroid of the triangle
                c = [(p1+q1+r1)/3, (p2+q2+r2)/3, (p3+q3+r3)/3]

                #calculate view vector V
                v = findViewVector(e,c)

                #create vector U and W
                u = [(q1-p1),(q2-p2),(q3-p3)]
                w = [(r1-p1),(r2-p2),(r3-p3)]

                #Find vector normal to the triangle
                n = findNormal(u,w)

                #Find dot product of v and n
                vn = dotProduct(n,v)

                if vn <= 0:
                    culling.append(0)
                elif vn > 0:
                    culling.append(1)
                    I = findIntensity(n,d)
                    intensityCulled.append(I)
                    
                #Find intensity of light direction
                    i = findIntensity(n,d)
                    intensity.append(i)
                    
    return culling, intensity, intensityCulled

def findViewVector(e,c):
    #Eye location point
    e1 = e[0]
    e2 = e[1]
    e3 = e[2]

    #Centroid points
    c1 = c[0]
    c2 = c[1]
    c3 = c[2]

    #subtracts both points
    ec1 = e1 - c1
    ec2 = e2 - c2
    ec3 = e3 - c3

    #Finds magnitude of e - c
    magnitude = math.sqrt((ec1*ec1) + (ec2*ec2) +  (ec3*ec3))

    #finds view vector
    v = [(ec1/magnitude),(ec2/magnitude),(ec3/magnitude)]

    return v

#finds normal
def findNormal(u,w):

    #Breaks down values for easier calculation
    u1 = u[0]
    u2 = u[1]
    u3 = u[2]
    w1 = w[0]
    w2 = w[1]
    w3 = w[2]

    #Calculates cross product of U^W
    n1 = (u2*w3) - (u3*w2)
    n2 = (u3*w1) - (u1*w3)
    n3 = (u1*w2) - (u2*w1)

    #Finds magnitude of cross product
    magOfDotProduct = math.sqrt((n1*n1) + (n2*n2) + (n3*n3))

    n = [(n1/magOfDotProduct),(n2/magOfDotProduct),(n3/magOfDotProduct)]

    return n

#Calculates dot product of two points
def dotProduct(n,v):
    n1 = n[0]
    n2 = n[1]
    n3 = n[2]

    v1 = v[0]
    v2 = v[1]
    v3 = v[2]

    vn = (v1*n1) + (v2*n2) + (v3+n3)

    return vn

#Finds the intensity of light direction
def findIntensity(n,d):
    n1 = n[0]
    n2 = n[1]
    n3 = n[2]
    d1 = d[0]
    d2 = d[1]
    d3 = d[2]

    dn = (-d1*n1) + (-d2*n2) + (-d3+n3)

    #Finds magnitudes
    magOfN = math.sqrt((n1*n1) + (n2*n2) + (n3*n3))
    magOfD = math.sqrt((d1*d1) + (d2*d2) + (d3*d3))
    
    i = dn/(magOfN/magOfD)
    
    intensity = max(i,0)
    
    return intensity


#Asks user for the input file
fileName = input('Please enter file name (Example: "./test_input.txt"\n')
outputFile = 'dbadillo_output_1_A.txt' 

#Define matrix A
A,e = readMatrix(fileName)

if len(A[0]) == 9:
    
    #Writes to an output file
    with open(outputFile, 'w') as f:
        
        culling, intensity, cullingIntensity = culling(A,e)
        
        print(*culling, file = f)
        print(*intensity, file = f)
        print(*cullingIntensity, file = f)
        print(f'Outputted to file: {outputFile}')

else:
    print('Not valid input')
