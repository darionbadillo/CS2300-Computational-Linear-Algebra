# Darion Badillo
# Assignment 1 - Part 1
# 9/8/2022

#This function takes values passed through from main and creates a 2D matrix of the specified amount.
def nameMatrix(rowSize,columnSize,tempNum,incrementNum):
    outerRange = len(rowSize)
    innerRange = len(columnSize)
    tempMat = []
    count = tempNum
    #This for loop generates a matrix of the specified amount and fills each array with values
    for i in range(0,outerRange):
        tempMat = tempMat + [[]]
        for j in range(0,innerRange):
            tempMat[i] = tempMat[i] + [count]
            count = count + incrementNum
    #returns new matrix        
    return tempMat

#This function turns each row of the matrix into a string and prints it to the file
def printMatrix(name,matA):
    with open(name,'w') as newFile:
        for i in matA:
            newFile.write(','.join([str(a) for a in i]) + '\n')
    newFile.close()

#Calls the function to create a new Matrix with specified values 5 separate times.
mat1 = nameMatrix("Darion","Badillo",1,1)
mat2 = nameMatrix("Badillo","Darion",3,3)
mat3 = nameMatrix("Badillo","Darion",0.4,0.3)
mat4 = nameMatrix("123456","0123456791011",2,2)
mat5 = nameMatrix("123456","0123456791011",-7,1)

#Calls function to print to file
printMatrix('dbadillo_mat1.txt',mat1)
printMatrix('dbadillo_mat2.txt',mat2)
printMatrix('dbadillo_mat3.txt',mat3)
printMatrix('dbadillo_mat4.txt',mat4)
printMatrix('dbadillo_mat5.txt',mat5)


# Darion Badillo
# Assignment 1 - Part 2
# 9/8/2022

#This function reads a matrix from a file
def readMatrix(path):
    f = open(path,'r')
    a = []

    for line in f:
        a.append(line.rstrip("\n").split(','))
    for row in range (len(a)):
        for column in range(0,len(a[row])):
            a[row][column] = float(a[row][column])
        
    return a

#This function adds two matrices together
def addMatrices(matA,matB):
    addedMatrix = matA
    #If-condition that compares matrices size
    #if len(matA) == len(matB) and len(matA[0]) == len(matB[0]):
    if matA == matB:
        #Adds matrices together
        for row in range(len(matA)):
            for column in range(len(matA[0])):
                addedMatrix[row][column] = matA[row][column] + matB[row][column]
        return addedMatrix
    
    #Returns an empty matrix if the two matrices cannot be added together
    else:
        return []

#Prints a matrix to a text file
def printMatrix(name,matA):
    with open(name,'w') as newFile:
        for i in matA:
            newFile.write(','.join([str(a) for a in i]) + '\n')
    newFile.close()

#Calls function to read and assign matrix from file 
mat1 = readMatrix("./dbadillo_mat1.txt")
mat2 = readMatrix("./dbadillo_mat2.txt")
mat3 = readMatrix("./dbadillo_mat3.txt")
mat4 = readMatrix("./dbadillo_mat4.txt")
mat5 = readMatrix("./dbadillo_mat5.txt")

#Adds two matrices together and then prints to file
mat11 = addMatrices(mat1,mat1)
printMatrix('dbadillo_p2_out11.txt',mat11)

mat12 = addMatrices(mat1,mat2)
printMatrix('dbadillo_p2_out12.txt',mat12)

mat13 = addMatrices(mat1,mat3)
printMatrix('dbadillo_p2_out13.txt',mat13)

mat14 = addMatrices(mat1,mat4)
printMatrix('dbadillo_p2_out14.txt',mat14)

mat15 = addMatrices(mat1,mat5)
printMatrix('dbadillo_p2_out15.txt',mat15)

mat22 = addMatrices(mat2,mat2)
printMatrix('dbadillo_p2_out22.txt',mat22)

mat23 = addMatrices(mat2,mat3)
printMatrix('dbadillo_p2_out23.txt',mat23)

mat24 = addMatrices(mat2,mat4)
printMatrix('dbadillo_p2_out24.txt',mat24)

mat25 = addMatrices(mat2,mat5)
printMatrix('dbadillo_p2_out25.txt',mat25)

mat33 = addMatrices(mat3,mat3)
printMatrix('dbadillo_p2_out33.txt',mat33)

mat34 = addMatrices(mat3,mat4)
printMatrix('dbadillo_p2_out34.txt',mat34)

mat35 = addMatrices(mat3,mat5)
printMatrix('dbadillo_p2_out35.txt',mat35)

mat44 = addMatrices(mat4,mat4)
printMatrix('dbadillo_p2_out44.txt',mat44)

mat45 = addMatrices(mat4,mat5)
printMatrix('dbadillo_p2_out45.txt',mat45)

mat55 = addMatrices(mat5,mat5)
printMatrix('dbadillo_p2_out55.txt',mat55)


# Darion Badillo
# Assignment 1 - Part 3
# 9/8/2022

#This function reads a matrix from a file
def readMatrix(path):
    f = open(path,'r')
    a = []

    for line in f:
        a.append(line.rstrip("\n").split(','))
        
    for row in range (len(a)):
        for column in range(0,len(a[row])):
            a[row][column] = float(a[row][column])
        
    return a

#This function adds two matrices together
def multiplyMatrices(matA,matB):
    multipliedMatrix = matB
    
    #If-condition that ensures matrices' capability of being multiplied
    if len(matA) == len(matB[0]):
        
        #Multiplies matrices together
        for i in range(len(matA)):
            for j in range(len(matB[0])):
                for k in range(len(matB)):
                    multipliedMatrix[i][j] += matA[i][k] * matB[k][j]
                    
        return multipliedMatrix
    
    #Returns an empty matrix if the two matrices cannot be added together
    else:
        return []

#Prints a matrix to a text file
def printMatrix(name,matA):
    with open(name,'w') as newFile:
        for i in matA:
            newFile.write(','.join([str(a) for a in i]) + '\n')
    newFile.close()

#Calls function to read and assign matrix from file 
mat1 = readMatrix("./dbadillo_mat1.txt")
mat2 = readMatrix("./dbadillo_mat2.txt")
mat3 = readMatrix("./dbadillo_mat3.txt")
mat4 = readMatrix("./dbadillo_mat4.txt")
mat5 = readMatrix("./dbadillo_mat5.txt")

#Multiplies two matrices together and then prints to file
mat11 = multiplyMatrices(mat1,mat1)
printMatrix('dbadillo_p3_out11.txt',mat11)

mat12 = multiplyMatrices(mat1,mat2)
printMatrix('dbadillo_p3_out12.txt',mat12)

mat13 = multiplyMatrices(mat1,mat3)
printMatrix('dbadillo_p3_out13.txt',mat13)

mat14 = multiplyMatrices(mat1,mat4)
printMatrix('dbadillo_p3_out14.txt',mat14)

mat15 = multiplyMatrices(mat1,mat5)
printMatrix('dbadillo_p3_out15.txt',mat15)

mat22 = multiplyMatrices(mat2,mat2)
printMatrix('dbadillo_p3_out22.txt',mat22)

mat23 = multiplyMatrices(mat2,mat3)
printMatrix('dbadillo_p3_out23.txt',mat23)

mat24 = multiplyMatrices(mat2,mat4)
printMatrix('dbadillo_p3_out24.txt',mat24)

mat25 = multiplyMatrices(mat2,mat5)
printMatrix('dbadillo_p3_out25.txt',mat25)

mat33 = multiplyMatrices(mat3,mat3)
printMatrix('dbadillo_p3_out33.txt',mat33)

mat34 = multiplyMatrices(mat3,mat4)
printMatrix('dbadillo_p3_out34.txt',mat34)

mat35 = multiplyMatrices(mat3,mat5)
printMatrix('dbadillo_p3_out35.txt',mat35)

mat44 = multiplyMatrices(mat4,mat4)
printMatrix('dbadillo_p3_out44.txt',mat44)

mat45 = multiplyMatrices(mat4,mat5)
printMatrix('dbadillo_p3_out45.txt',mat45)

mat55 = multiplyMatrices(mat5,mat5)
printMatrix('dbadillo_p3_out55.txt',mat55)


## Output Files:

##Program 1
mat1:
1,2,3,4,5,6,7
8,9,10,11,12,13,14
15,16,17,18,19,20,21
22,23,24,25,26,27,28
29,30,31,32,33,34,35
36,37,38,39,40,41,42

mat2:
3,6,9,12,15,18
21,24,27,30,33,36
39,42,45,48,51,54
57,60,63,66,69,72
75,78,81,84,87,90
93,96,99,102,105,108
111,114,117,120,123,126

mat3:
0.4,0.7,1.0,1.3,1.6,1.9000000000000001
2.2,2.5,2.8,3.0999999999999996,3.3999999999999995,3.6999999999999993
3.999999999999999,4.299999999999999,4.599999999999999,4.899999999999999,5.199999999999998,5.499999999999998
5.799999999999998,6.099999999999998,6.399999999999998,6.6999999999999975,6.999999999999997,7.299999999999997
7.599999999999997,7.899999999999997,8.199999999999998,8.499999999999998,8.799999999999999,9.1
9.4,9.700000000000001,10.000000000000002,10.300000000000002,10.600000000000003,10.900000000000004
11.200000000000005,11.500000000000005,11.800000000000006,12.100000000000007,12.400000000000007,12.700000000000008

mat4:
2,4,6,8,10,12,14,16,18,20,22,24,26
28,30,32,34,36,38,40,42,44,46,48,50,52
54,56,58,60,62,64,66,68,70,72,74,76,78
80,82,84,86,88,90,92,94,96,98,100,102,104
106,108,110,112,114,116,118,120,122,124,126,128,130
132,134,136,138,140,142,144,146,148,150,152,154,156

mat5:
-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5
6,7,8,9,10,11,12,13,14,15,16,17,18
19,20,21,22,23,24,25,26,27,28,29,30,31
32,33,34,35,36,37,38,39,40,41,42,43,44
45,46,47,48,49,50,51,52,53,54,55,56,57
58,59,60,61,62,63,64,65,66,67,68,69,70

##Program 2
p2_out11:
2.0,4.0,6.0,8.0,10.0,12.0,14.0
16.0,18.0,20.0,22.0,24.0,26.0,28.0
30.0,32.0,34.0,36.0,38.0,40.0,42.0
44.0,46.0,48.0,50.0,52.0,54.0,56.0
58.0,60.0,62.0,64.0,66.0,68.0,70.0
72.0,74.0,76.0,78.0,80.0,82.0,84.0

p2_out12:
empty

p2_out13:
empty

p2_out14:
empty

p2_out15:
empty

p2_out22:
6.0,12.0,18.0,24.0,30.0,36.0
42.0,48.0,54.0,60.0,66.0,72.0
78.0,84.0,90.0,96.0,102.0,108.0
114.0,120.0,126.0,132.0,138.0,144.0
150.0,156.0,162.0,168.0,174.0,180.0
186.0,192.0,198.0,204.0,210.0,216.0
222.0,228.0,234.0,240.0,246.0,252.0

p2_out23:
empty

p2_out24:
empty

p2_out25:
empty

p2_out33:
0.8,1.4,2.0,2.6,3.2,3.8000000000000003
4.4,5.0,5.6,6.199999999999999,6.799999999999999,7.399999999999999
7.999999999999998,8.599999999999998,9.199999999999998,9.799999999999997,10.399999999999997,10.999999999999996
11.599999999999996,12.199999999999996,12.799999999999995,13.399999999999995,13.999999999999995,14.599999999999994
15.199999999999994,15.799999999999994,16.399999999999995,16.999999999999996,17.599999999999998,18.2
18.8,19.400000000000002,20.000000000000004,20.600000000000005,21.200000000000006,21.800000000000008
22.40000000000001,23.00000000000001,23.600000000000012,24.200000000000014,24.800000000000015,25.400000000000016

p2_out34:
empty

p2_out35:
empty

p2_out44:
4.0,8.0,12.0,16.0,20.0,24.0,28.0,32.0,36.0,40.0,44.0,48.0,52.0
56.0,60.0,64.0,68.0,72.0,76.0,80.0,84.0,88.0,92.0,96.0,100.0,104.0
108.0,112.0,116.0,120.0,124.0,128.0,132.0,136.0,140.0,144.0,148.0,152.0,156.0
160.0,164.0,168.0,172.0,176.0,180.0,184.0,188.0,192.0,196.0,200.0,204.0,208.0
212.0,216.0,220.0,224.0,228.0,232.0,236.0,240.0,244.0,248.0,252.0,256.0,260.0
264.0,268.0,272.0,276.0,280.0,284.0,288.0,292.0,296.0,300.0,304.0,308.0,312.0

p2_out45:
empty

p2_out55:
-14.0,-12.0,-10.0,-8.0,-6.0,-4.0,-2.0,0.0,2.0,4.0,6.0,8.0,10.0
12.0,14.0,16.0,18.0,20.0,22.0,24.0,26.0,28.0,30.0,32.0,34.0,36.0
38.0,40.0,42.0,44.0,46.0,48.0,50.0,52.0,54.0,56.0,58.0,60.0,62.0
64.0,66.0,68.0,70.0,72.0,74.0,76.0,78.0,80.0,82.0,84.0,86.0,88.0
90.0,92.0,94.0,96.0,98.0,100.0,102.0,104.0,106.0,108.0,110.0,112.0,114.0
116.0,118.0,120.0,122.0,124.0,126.0,128.0,130.0,132.0,134.0,136.0,138.0,140.0

##Program 3
p3_out11:
empty

p3_out12:
2103.0,2190.0,2277.0,2364.0,2451.0,2538.0
173130.0,180300.0,187470.0,194640.0,201810.0,208980.0
50436594.0,52525332.0,54614070.0,56702808.0,58791546.0,60880284.0
31577178363.0,32884888620.0,34192598877.0,35500309134.0,36808019391.0,38115729648.0
34409308904775.0,35834306593734.0,37259304282693.0,38684301971652.0,40109299660611.0,41534297349570.0
5.785944314721695e+16,6.025558463896885e+16,6.265172613072075e+16,6.504786762247267e+16,6.744400911422459e+16,6.98401506059765e+16
111.0,114.0,117.0,120.0,123.0,126.0

p3_out13:
213.20000000000002,221.90000000000003,230.60000000000002,239.30000000000004,248.00000000000006,256.70000000000005
17552.0,18269.0,18986.000000000004,19703.000000000007,20420.000000000004,21137.0
5113284.000000001,5322157.799999999,5531031.6,5739905.400000002,5948779.200000002,6157653.000000001
3201308178.200001,3332079203.8999996,3462850229.5999994,3593621255.3000016,3724392281.000001,3855163306.7000003
3488430813442.8003,3630930582338.6997,3773430351234.599,3915930120130.5024,4058429889026.401,4200929657922.3
5865815697780091.0,6105429846955282.0,6345043996130473.0,6584658145305668.0,6824272294480856.0,7063886443656046.0
11.200000000000005,11.500000000000005,11.800000000000006,12.100000000000007,12.400000000000007,12.700000000000008

p3_out14:
empty

p3_out15:
empty

p3_out22:
empty

p3_out23:
empty

p3_out24:
empty

p3_out25:
empty

p3_out33:
empty

p3_out34:
empty

p3_out35:
empty

p3_out44:
empty

p3_out45:
empty

p3_out55:
empty
