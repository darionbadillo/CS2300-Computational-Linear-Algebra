# Darion Badillo
# Assignment 3 Part B - 2D and 3D Matrix Operations
# 9/20/2022
import math
import numpy as np
import sys
##Reads file into a matrix 
def readMatrix(path):

    ##Creates an array using numpy
    a = np.loadtxt(path, dtype=float)

    ##Takes last column of A to find vector B
    b = a[:,[2]]

    ##Deletes last column of A 
    a = np.delete(a,-1,axis=1)  
    print('Read in file successfully')
    
    return a, b
       
def findΛ(A):
    #Assigns each element of the matrix to a variable
    A1 = float(A[0][0])
    A2 = float(A[0][1])
    A3 = float(A[1][0])
    A4 = float(A[1][1])
    Λ = np.identity(2)

    #
    a = 1;
    b = -A1-A4
    c = (A1*A4)-(A2*A3)

    eig1, eig2 = quadraticFormula(a,b,c)

    det1 = determinant(A1,A2,A3,A4,eig1)
    det2 = determinant(A1,A2,A3,A4,eig2)
    
    if (det1 == True and det2 == True):
        Λ[0][0] = eig1
        Λ[1][1] = eig2
    elif(det1 == True and det2 == False):
        eig2 = eig1
        Λ[0][0] = eig1
        Λ[1][1] = eig1
    elif(det1 == False and det2 == True):
        eig1 = eig2
        Λ[0][0] = eig2
        Λ[1][1] = eig2
    else:
        print('No real eigenvalues', file = f)
        sys.exit(0)

    return Λ, eig1, eig2

def findR(A,eig1,eig2):
    throwAway,R = np.linalg.eig(A)

    return R

#Calculates the eigendecomposition of the three matrices by multiplying them together
def findSym(R,Λ):
    rInv = np.linalg.inv(R)
    mat1 = multiplyMatrices(R,Λ)
    A = multiplyMatrices(mat1,rInv)
    return A

#Multiplies two matrices together
def multiplyMatrices(matA,matB):
    multipliedMatrix = matB
    
    #If-condition that ensures matrices' capability of being multiplied
    if len(matA) == len(matB[0]):
        
        #Multiplies matrices together
        for i in range(len(matA)):
            for j in range(len(matB[0])):
                for k in range(len(matB)):
                    multipliedMatrix[i][j] += matA[i][k] * matB[k][j]

        #Returns the new matrix            
        return multipliedMatrix    

#Returns the eigen values using the quadratic formula
def quadraticFormula(a,b,c):
    try:
        x = (b*b)-(4*a*c)
        sqrt = math.sqrt(x)
        eig1 = (-b + sqrt)/(2*a)
        eig2 = (-b - sqrt)/(2*a)
        return eig1,eig2
    except (TypeError, ValueError):
        print('No Real Eigenvalues', file=f)
        print(f'Outputted to file: {outputFile}')
        sys.exit(0)

#Find the determinant 
def determinant(A1,A2,A3,A4,eig):
    #Subtracts the eigen value from the specified matrix positions
    AD = (A1-eig)*(A4-eig)
    det = AD-(A3*A2) #determinant calculation

    #Checks if determinant is 0
    if det != 0:
        return False
    else:
        return True
    
#Prints matrix 
def printMatrix(mat):
    for row in mat:
        print(row, file=f)
    
    return None

#Asks user for the input file
fileName = input('Please enter file name (Example: "./test_input_1.txt"\n')
outputFile = 'dbadillo_partB_' + fileName[2:7] + 'output_' + fileName[-5:] + ''

#Writes to an output file 
with open(outputFile, 'w') as f:
    
    #Define matrix A and Vector B
    A, B = readMatrix(fileName)

    Λ, eig1, eig2 = findΛ(A)
    R = findR(A,eig1,eig2)
    symmMatrix = findSym(R,Λ)

    #Prints all calculated matrices and values
    printMatrix(Λ.round(decimals=4))
    printMatrix(R.round(decimals=4))
    printMatrix(symmMatrix.round(decimals=4))

    #Checks if A is the same as the eigendecomp matrix
    if (A.all() == symmMatrix.all()):
        print('1', file=f)
    else:
        print('0', file=f)
print(f'Outputted to file: {outputFile}')
